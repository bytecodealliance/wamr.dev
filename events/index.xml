<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Events on</title><link>https://bytecodealliance.github.io/wamr.dev/events/</link><description>Recent content in Events on</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Mon, 10 Oct 2022 18:50:29 +0000</lastBuildDate><atom:link href="https://bytecodealliance.github.io/wamr.dev/events/index.xml" rel="self" type="application/rss+xml"/><item><title>Webassembly key features and future roadmap (CHN)</title><link>https://bytecodealliance.github.io/wamr.dev/events/webassembly-key-features-and-future-roadmap-chn/</link><pubDate>Wed, 19 Oct 2022 07:38:37 +0800</pubDate><guid>https://bytecodealliance.github.io/wamr.dev/events/webassembly-key-features-and-future-roadmap-chn/</guid><description>作者 | 王鑫
策划 | 嘉洋
审校 | 王一鹏
WebAssembly (简称Wasm)是目前备受关注的一门新的计算机语言，本演讲从计算机语言技术的角度解析WebAssembly的语言特性，以及WebAssembly为应用提供安全沙箱机制的原理。我们将介绍WebAssembly在浏览器以外的主要应用场景和其带来的价值，以及目前W3C正在定义中的一些主要特性及其对未来的影响。
本文整理自英特尔中国有限公司高级技术经理王鑫在DIVE全球基础软件创新大会 2022的演讲分享，主题为“WebAssembly的核心语言特性与未来发展”。
分享主要分为七个部分展开：第一部分是WebAssembly的标准发展；第二部分和第三部分会分别介绍语言特性、字节码与内存模型；接下来第四部分则是程序的控制流与函数调用；第五部分会带大家了解类型系统与内存垃圾回收；第六部分会讲解模块的组件模型；最后一部分会介绍WASI与字节码联盟的情况。
以下是分享实录：
Table Of Contents WebAssembly标准发展 WebAssembly语言特性 字节码与内存模型 控制流与函数调用 系统类型与内存垃圾回收 模块的组件模型 WASI与字节码联盟 WebAssembly标准发展 # 在2015年，WebAssembly第一次被对外公布。2017年MVP (Minimal Viable Product)规范完成，并在Chrome、Edge、Firefox和Safari等四个主流的浏览器上得到支持。到了2018年，W3C工作组发布了三个公开的Drafts，包含WebAssembly的Core Specification、JavaScript Interface和Web API。在2019年，WebAssembly spec 1.0正式发布。同年10月份左右，Bytecode Alliance (BA)由Intel、 Mozilla、Fastly、Redhat四家公司成立，主要的目标是构建与推广基于WebAssembly以及WebAssembly System Interface的安全软件栈。到2021年，BA正式成为非盈利性的组织，微软也加入成为协作会员，到目前已经有大概30多家的会员，发展情况非常良好。
我们看下两个基于 WebAssembly 经典的使用案例。左边是 AutoCAD在浏览器上运行，能把 30 年积累的桌面应用代码移植到到了浏览器上面，这主要归功于把大量的 C/C++ 代码转换成 WebAssembly。2021年另外一个标志性的事件就是 Adobe也把它的经典的软件Photoshop 搬移到了浏览器上面。据相关技术分析，Photoshop的 Web版应用主要也是基于WebAssembly，当运行应用的时候，可能会有高达 1G 左右的本地磁盘的缓存，只需下载10多兆的网络资源，启动时间大概3秒钟左右。整个应用充分地利用了WebAssembly和多核的技术，在运行一些操作的时候，最热的20个函数里面，SIMD向量化计算的占有率约为40%左右，这说明通过类似于向量化计算的能力，WebAssembly已经具备了支持开发强计算应用的能力。
WebAssembly语言特性 # 我们这里首先对Wasm语言的特性做一个总结。它包含了二进制和文本的两种格式，它的执行模式是基于Stack的一种执行模式。它定义了四种基本的数据类型，就是32位、64位的整数，32位和64位的浮点精度。
Wasm的内存设计也很有特色，包含了托管的内存和非托管内存类型。非托管内存也叫线性内存，一个Wasm实例可以有多块的线性内存。目前线性内存的布局是由编译器来定的。为什么要了解这个呢？因为现在WebAssembly是支持多种前端语言的编译，在每个编译器有自己的内存布局的时候，会导致不同语言模块之间静态链接的技术挑战。
Wasm的流控是一个结构性的流控。它的函数调用需要使用函数表(Function table)。如果和基于C语言编译的机器指令相比，机器指令里可以直接跳到目标的物理地址，这里是一个间接地址。Wasm的函数调用操作码后面都跟着一个索引号，这个索引就是目标函数在Function table里面的索引值。如果是间接调用函数，则需要做函数类型检查。
Wasm支持一系列关键组成元素的Import and Export，一个WebAssembly程序会定义需要外部导入什么样的元素，也可以定义哪些元素可以暴露给外部来访问，为它的宿主环境，例如浏览器的JavaScript，或者在独立Wasm引擎的调用者，提供了一个可以通过编程的方式，来控制和访问目标的WebAssembly应用对象的能力。
另外一个特性是对硬件向量化计算SIMD的支持，像刚才介绍到的，Photoshop里面大量用到SIMD这种能力。
最后，它是个强类型的Type system，它也定义了GC和组件的模型。
字节码与内存模型 # 我们使用一个例子来介绍Wasm的字节码和内存模型。在最左边是一段C语言的源码，这段代码会被编译到屏幕中间WebAssembly的字节码，右边展示在运行态的内存布局。左边的源码定义了一个全局变量count，一个函数add，add会把输入参数x再加上count，把结果更新到count。</description></item><item><title>Lightning Talk: WAMR, Intel</title><link>https://bytecodealliance.github.io/wamr.dev/events/lightning-talk-wamr-intel/</link><pubDate>Tue, 18 Oct 2022 20:16:52 +0800</pubDate><guid>https://bytecodealliance.github.io/wamr.dev/events/lightning-talk-wamr-intel/</guid><description/></item><item><title>The Cool Features of WebAssembly Micro Runtime WAMR for IoT and Embedded</title><link>https://bytecodealliance.github.io/wamr.dev/events/the-cool-features-of-webassembly-micro-runtime-wamr-for-iot-and-embedded/</link><pubDate>Tue, 18 Oct 2022 19:58:45 +0800</pubDate><guid>https://bytecodealliance.github.io/wamr.dev/events/the-cool-features-of-webassembly-micro-runtime-wamr-for-iot-and-embedded/</guid><description/></item><item><title>WebAssembly Open Day (CHN)</title><link>https://bytecodealliance.github.io/wamr.dev/events/webassembly-open-day-chn/</link><pubDate>Wed, 12 Oct 2022 21:27:24 +0800</pubDate><guid>https://bytecodealliance.github.io/wamr.dev/events/webassembly-open-day-chn/</guid><description>活动嘉宾 # 王鑫 # Intel 技术经理 杨斌 # 蚂蚁集团技术总监 《字节码联盟与 WAMR 开源社区进展介绍》 # 嘉宾简介： # 王鑫
任职英特尔公司，关注计算机语言与运行引擎，可信计算和物联网等技术领域。开发与创建开源项目 WebAssembly Micro Runtime, 参与推动英特尔、微软、Mozilla 等公司成立字节码联盟 (Bytecode-Alliance)，任字节码联盟技术管理委员会(TSC)成员。
杨斌
花名：凯撒，蚂蚁集团技术总监，关注操作系统，计算机语言与运行引擎等技术领域。
Till Schneidereit
字节码联盟董事会主席
Ralph Squillace
微软高级总监
字节码联盟董事会成员
《蚂蚁集团 WASM 编译器虚拟机基础能力建设》 # 嘉宾简介： # 汤伟
一直从事编译器和虚拟机相关工作，2020年11月加入蚂蚁金服，主导webassembly相关工具链的设计与开发。
议题简介
作为面向蚂蚁的 wasm 编译器、虚拟机基础平台团队，面向蚂蚁 wasm 用户核心诉求，针对开发效率、性能提升以及生态拓展，确定 wasm 编译器、虚拟机上的技术选型，探索未来编译器、虚拟机协同设计空间。
听众收益
了解wasm在蚂蚁的业务场景中的需求和我们的编译器、虚拟机技术能力建设上的一些探索。
《WebAssembly Micro Runtime 开源技术解析与展望》 # 嘉宾简介： # 何良
INTEL 资深软件工程师， WAMR开源项目核心开发者
议题简介
主要介绍 WebAssembly Micro Runtime(WAMR) 的技术特性，发展历程以及路线图。面对嵌入式设备独特的资源条件和使用场景，WAMR进行了有针对性的特性开发，比如选用不同的运行模式适应不同的资源水平，利用XIP在文件系统中直接执行，在RUNTIME中支持 Sensor API 等。此外，WAMR努力打造高效的开发环境，提供源码级调试的功能框架和VSCODE插件。目前，支持高级语言（比如JAVA,KOTLIN等）和SOCKET APIs的功能开发正在有序展开。</description></item></channel></rss>