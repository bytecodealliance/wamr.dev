<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>presentation on</title><link>https://bytecodealliance.github.io/wamr.dev/categories/presentation/</link><description>Recent content in presentation on</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Tue, 18 Oct 2022 20:16:52 +0800</lastBuildDate><atom:link href="https://bytecodealliance.github.io/wamr.dev/categories/presentation/index.xml" rel="self" type="application/rss+xml"/><item><title>Lightning Talk: WAMR, Intel</title><link>https://bytecodealliance.github.io/wamr.dev/blog/lightning-talk-wamr-intel/</link><pubDate>Tue, 18 Oct 2022 20:16:52 +0800</pubDate><guid>https://bytecodealliance.github.io/wamr.dev/blog/lightning-talk-wamr-intel/</guid><description/></item><item><title>The Cool Features of WebAssembly Micro Runtime WAMR for IoT and Embedded</title><link>https://bytecodealliance.github.io/wamr.dev/blog/the-cool-features-of-webassembly-micro-runtime-wamr-for-iot-and-embedded/</link><pubDate>Tue, 18 Oct 2022 19:58:45 +0800</pubDate><guid>https://bytecodealliance.github.io/wamr.dev/blog/the-cool-features-of-webassembly-micro-runtime-wamr-for-iot-and-embedded/</guid><description/></item><item><title>WAMR fast interpreter introduction</title><link>https://bytecodealliance.github.io/wamr.dev/blog/wamr-fast-interpreter-introduction/</link><pubDate>Tue, 18 Oct 2022 19:15:51 +0800</pubDate><guid>https://bytecodealliance.github.io/wamr.dev/blog/wamr-fast-interpreter-introduction/</guid><description> A fast WebAssembly Interpreter design in WASM-Micro-Runtime In this paper, we introduced wasm-micro-runtime (abbreviated WAMR) fast-interpreter, in which several optimization methods are applied including fast bytecode dispatching, bytecode fusion, etc. Experiments show that the performance can be improved by ~150% on CoreMark compared with the classic stack-based interpreter. www.intel.com</description></item></channel></rss>