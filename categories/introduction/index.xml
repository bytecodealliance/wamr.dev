<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>introduction on</title><link>https://bytecodealliance.github.io/wamr.dev/categories/introduction/</link><description>Recent content in introduction on</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Tue, 21 Mar 2023 09:20:07 +0800</lastBuildDate><atom:link href="https://bytecodealliance.github.io/wamr.dev/categories/introduction/index.xml" rel="self" type="application/rss+xml"/><item><title>The WAMR memory model</title><link>https://bytecodealliance.github.io/wamr.dev/blog/the-wamr-memory-model/</link><pubDate>Tue, 21 Mar 2023 09:20:07 +0800</pubDate><guid>https://bytecodealliance.github.io/wamr.dev/blog/the-wamr-memory-model/</guid><description>The WAMR memory categories # According to the lifecycle and associated functionalities, we put the memory used in WAMR into four categories:
runtime memory: memory used by runtime globally Wasm module memory: memory used for a loaded Wasm module, freed when the module is unloaded Wasm module instance memory: memory used for a Wasm module instance, freed when the instance is destroyed Execution environment memory: memory use for execution of Wasm function from a Wasm module instance.</description></item><item><title>Understand the WAMR stacks</title><link>https://bytecodealliance.github.io/wamr.dev/blog/understand-the-wamr-stacks/</link><pubDate>Sat, 18 Mar 2023 09:20:07 +0800</pubDate><guid>https://bytecodealliance.github.io/wamr.dev/blog/understand-the-wamr-stacks/</guid><description>The status of stacks # During the WAMR executes a Wasm function, there will be a Wasm stack created and used. For interpreter mode, as the Wasm functions intercall, the Wasm stack frames will grow, while the native stack keeps unchanged.
When the Wasm calls into a imported native function and the native function then call into some Wasm function, the native stack will add a frame, and an empty frame will be inserted into wasm stack to indicate the function is imported from native.</description></item><item><title>Understand the WAMR heaps</title><link>https://bytecodealliance.github.io/wamr.dev/blog/understand-the-wamr-heaps/</link><pubDate>Fri, 17 Mar 2023 17:20:07 +0800</pubDate><guid>https://bytecodealliance.github.io/wamr.dev/blog/understand-the-wamr-heaps/</guid><description>Linear memory # The linear memory is a contiguous, mutable array of raw bytes. For most compilers, e.g. wasi-sdk, emsdk, rustc or asc, normally it includes three parts, data area, auxiliary stack area and heap area. The initial and maximum sizes of linear memory can be configured through the compilation parameters:
For wasi-sdk, the initial/max size can be specified with -Wl,&amp;ndash;initial-memory=n1,&amp;ndash;max-memory=n2 For emsdk, the initial/max size can be specified with -s INITIAL_MEMORY=n1 -s MAXIMUM_MEMORY=n2 -s ALLOW_MEMORY_GROWTH=1 or -s TOTAL_MEMORY=n For asc, they can be specified with &amp;ndash;initialMemory and &amp;ndash;maximumMemory flags</description></item><item><title>Introduction to WAMR running modes</title><link>https://bytecodealliance.github.io/wamr.dev/blog/introduction-to-wamr-running-modes/</link><pubDate>Thu, 19 Jan 2023 17:20:07 +0800</pubDate><guid>https://bytecodealliance.github.io/wamr.dev/blog/introduction-to-wamr-running-modes/</guid><description>The options of running a Wasm module # Usually, a WebAssembly module can be executed in either interpreter, Just-In-Time (JIT), or Ahead-Of-Time (AOT) compilation mode, and the choice can be based on the preference for execute performance, resource, etc.
WAMR supports all three modes and even more:
AOT: WAMR AOT helps to achieve nearly native speed, very small footprint, and quick startup. Use the wamrc compiler to compile wasm file to the AOT file, and then run it on iwasm vmcore.</description></item></channel></rss>