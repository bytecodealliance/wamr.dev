<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Xin Wang on</title><link>https://bytecodealliance.github.io/wamr.dev/contributors/xin-wang/</link><description>Recent content in Xin Wang on</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Fri, 17 Mar 2023 17:20:07 +0800</lastBuildDate><atom:link href="https://bytecodealliance.github.io/wamr.dev/contributors/xin-wang/index.xml" rel="self" type="application/rss+xml"/><item><title>Understand the WAMR heap</title><link>https://bytecodealliance.github.io/wamr.dev/blog/understand-the-wamr-heap/</link><pubDate>Fri, 17 Mar 2023 17:20:07 +0800</pubDate><guid>https://bytecodealliance.github.io/wamr.dev/blog/understand-the-wamr-heap/</guid><description>Linear memory # The linear memory is a contiguous, mutable array of raw bytes. For most compilers, e.g. wasi-sdk, emsdk, rustc or asc, normally it includes three parts, data area, auxiliary stack area and heap area.
For wasi-sdk, the initial/max size can be specified with -Wl,&amp;ndash;initial-memory=n1,&amp;ndash;max-memory=n2 For emsdk, the initial/max size can be specified with -s INITIAL_MEMORY=n1 -s MAXIMUM_MEMORY=n2 -s ALLOW_MEMORY_GROWTH=1 or -s TOTAL_MEMORY=n For asc, they can be specified with &amp;ndash;initialMemory and &amp;ndash;maximumMemory flags</description></item></channel></rss>