<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Jiongqiang Li on</title><link>https://bytecodealliance.github.io/wamr.dev/contributors/jiongqiang-li/</link><description>Recent content in Jiongqiang Li on</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Tue, 04 Apr 2023 15:40:31 +0800</lastBuildDate><atom:link href="https://bytecodealliance.github.io/wamr.dev/contributors/jiongqiang-li/index.xml" rel="self" type="application/rss+xml"/><item><title>Transferring data from host to wasm apps</title><link>https://bytecodealliance.github.io/wamr.dev/blog/transferring-data-from-host-to-wasm-apps/</link><pubDate>Tue, 04 Apr 2023 15:40:31 +0800</pubDate><guid>https://bytecodealliance.github.io/wamr.dev/blog/transferring-data-from-host-to-wasm-apps/</guid><description>Overview: From Native to Wasm # This section mainly introduces the situation of transferring data from the native world to the WASM world, which usually occurs in two scenarios:
Parameter transfer in native call WASM When WASM call native, the parameter is used to store the return value It should be noted that the WASM context cannot directly access the memory of the native world, so in most cases, memory copying is still necessary.</description></item><item><title>Architecture for transferring data between host and wasm app</title><link>https://bytecodealliance.github.io/wamr.dev/blog/architecture-for-transferring-data-between-host-and-wasm-app/</link><pubDate>Mon, 03 Apr 2023 21:03:20 +0800</pubDate><guid>https://bytecodealliance.github.io/wamr.dev/blog/architecture-for-transferring-data-between-host-and-wasm-app/</guid><description>Architecture for transferring data between Host and WASM app # To facilitate handling various situations of data transmission, we need to design an overall architecture to handle data transmission situations. Of course, you don&amp;rsquo;t necessarily need this architecture, it&amp;rsquo;s just a reference.
This architecture is divided into 5 layers: the native layer, the native wrapper layer, the wasm wrapper layer, and the wasm layer, the mapping layer.
The native layer, the native wrapper layer and the mapping layer are all running in the native context, while the wasm layer and the wasm wrapper layer are both running in the wasm context.</description></item><item><title>Overview of transfering data between Host and WASM app</title><link>https://bytecodealliance.github.io/wamr.dev/blog/overview-of-transfering-data-between-host-and-wasm-app/</link><pubDate>Mon, 03 Apr 2023 19:02:23 +0800</pubDate><guid>https://bytecodealliance.github.io/wamr.dev/blog/overview-of-transfering-data-between-host-and-wasm-app/</guid><description>When discussing the method of transferring data between the Host and WASM app, we need to identify three concepts: execution context, memory space and memory layout. This article will introduce these 3 concepts.
1 Execution Context # The execution context refers to whether the currently executing code is WASM or Native. If WASM code is currently running, we call it the WASM context. If Native code is currently running, we call it the Native context.</description></item></channel></rss>